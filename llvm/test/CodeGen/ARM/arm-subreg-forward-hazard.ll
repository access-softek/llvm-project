; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple armv8 -mattr=+neon,+fp-armv8 -arm-subreg-write | FileCheck %s
; RUN: llc < %s -mtriple armv8 -mattr=+neon,+fp-armv8 | FileCheck %s --check-prefix NOOPT

declare <2 x float> @llvm.arm.neon.vmaxnm.v2f32(<2 x float>, <2 x float>) nounwind readnone
declare <4 x float> @llvm.arm.neon.vmaxnm.v4f32(<4 x float>, <4 x float>) nounwind readnone

define <2 x float> @foo(float* %0, float* %1, i64 %offset) {
; CHECK-LABEL: foo:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    add r1, r1, r2, lsl #2
; CHECK-NEXT:    vld1.32 {d16[0]}, [r0]
; CHECK-NEXT:    vld1.32 {d17[0]}, [r1]
; CHECK-NEXT:    vmaxnm.f32 d16, d16, d17
; CHECK-NEXT:    vmov r0, r1, d16
; CHECK-NEXT:    bx lr
;
; NOOPT-LABEL: foo:
; NOOPT:       @ %bb.0:
; NOOPT-NEXT:    vldr s0, [r0]
; NOOPT-NEXT:    add r0, r1, r2, lsl #2
; NOOPT-NEXT:    vldr s2, [r0]
; NOOPT-NEXT:    vmaxnm.f32 d16, d0, d1
; NOOPT-NEXT:    vmov r0, r1, d16
; NOOPT-NEXT:    bx lr
  %3 = load float, float* %0, align 4
  %4 = insertelement <2 x float> undef, float %3, i32 0

  %5 = getelementptr float, float* %1, i64 %offset
  %6 = load float, float* %5, align 4
  %7 = insertelement <2 x float> undef, float %6, i32 0

  %8 = call <2 x float> @llvm.arm.neon.vmaxnm.v2f32(<2 x float> %4, <2 x float> %7)
  ret <2 x float> %8
}

define <2 x float> @bar(float* %0, float* %1, float* %2, float* %3, i64 %offset) {
; CHECK-LABEL: bar:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    ldr r1, [sp]
; CHECK-NEXT:    vld1.32 {d16[0]}, [r2]
; CHECK-NEXT:    add r1, r0, r1, lsl #2
; CHECK-NEXT:    add r0, r0, #4
; CHECK-NEXT:    vld1.32 {d16[1]}, [r3]
; CHECK-NEXT:    vld1.32 {d17[0]}, [r0]
; CHECK-NEXT:    vld1.32 {d17[1]}, [r1]
; CHECK-NEXT:    vmaxnm.f32 d16, d17, d16
; CHECK-NEXT:    vmov r0, r1, d16
; CHECK-NEXT:    bx lr
;
; NOOPT-LABEL: bar:
; NOOPT:       @ %bb.0:
; NOOPT-NEXT:    ldr r1, [sp]
; NOOPT-NEXT:    vldr s2, [r0, #4]
; NOOPT-NEXT:    vldr s1, [r3]
; NOOPT-NEXT:    add r0, r0, r1, lsl #2
; NOOPT-NEXT:    vldr s0, [r2]
; NOOPT-NEXT:    vldr s3, [r0]
; NOOPT-NEXT:    vmaxnm.f32 d16, d1, d0
; NOOPT-NEXT:    vmov r0, r1, d16
; NOOPT-NEXT:    bx lr
  %gep0 = getelementptr float, float* %0, i64 1
  %gep1 = getelementptr float, float* %0, i64 %offset
  %f0 = load float, float* %gep0, align 4
  %f1 = load float, float* %gep1, align 4
  %f2 = load float, float* %2, align 4
  %f3 = load float, float* %3, align 4

  %va0 = insertelement <2 x float> undef, float %f0, i32 0
  %va1 = insertelement <2 x float> %va0, float %f1, i32 1

  %vb0 = insertelement <2 x float> undef, float %f2, i32 0
  %vb1 = insertelement <2 x float> %vb0, float %f3, i32 1

  %res = call <2 x float> @llvm.arm.neon.vmaxnm.v2f32(<2 x float> %va1, <2 x float> %vb1)
  ret <2 x float> %res
}

define <2 x float> @baz(double %0, <2 x float> %vf0) {
; CHECK-LABEL: baz:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    vmov d16, r0, r1
; CHECK-NEXT:    vcvt.f32.f64 s0, d16
; CHECK-NEXT:    vmov r0, s0
; CHECK-NEXT:    vmov d16, r2, r3
; CHECK-NEXT:    vmov.32 d17[0], r0
; CHECK-NEXT:    vmaxnm.f32 d16, d16, d17
; CHECK-NEXT:    vmov r0, r1, d16
; CHECK-NEXT:    bx lr
;
; NOOPT-LABEL: baz:
; NOOPT:       @ %bb.0:
; NOOPT-NEXT:    vmov d16, r0, r1
; NOOPT-NEXT:    vcvt.f32.f64 s0, d16
; NOOPT-NEXT:    vmov d16, r2, r3
; NOOPT-NEXT:    vmaxnm.f32 d16, d16, d0
; NOOPT-NEXT:    vmov r0, r1, d16
; NOOPT-NEXT:    bx lr
  %f = fptrunc double %0 to float
  %vf1 = insertelement <2 x float> undef, float %f, i32 0
  %res = call <2 x float> @llvm.arm.neon.vmaxnm.v2f32(<2 x float> %vf0, <2 x float> %vf1)
  ret <2 x float> %res
}

define <4 x float> @foov4(float* %0, float* %1) {
; CHECK-LABEL: foov4:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    vld1.32 {q8[0]}, [r0]
; CHECK-NEXT:    vld1.32 {q9[0]}, [r1]
; CHECK-NEXT:    vmaxnm.f32 q8, q9, q8
; CHECK-NEXT:    vmov r0, r1, d16
; CHECK-NEXT:    vmov r2, r3, d17
; CHECK-NEXT:    bx lr
;
; NOOPT-LABEL: foov4:
; NOOPT:       @ %bb.0:
; NOOPT-NEXT:    vldr s0, [r0]
; NOOPT-NEXT:    vldr s4, [r1]
; NOOPT-NEXT:    vmaxnm.f32 q8, q1, q0
; NOOPT-NEXT:    vmov r0, r1, d16
; NOOPT-NEXT:    vmov r2, r3, d17
; NOOPT-NEXT:    bx lr
  %3 = load float, float* %0, align 4
  %4 = insertelement <4 x float> undef, float %3, i32 0

  %5 = load float, float* %1, align 4
  %6 = insertelement <4 x float> undef, float %5, i32 0

  %7 = call <4 x float> @llvm.arm.neon.vmaxnm.v4f32(<4 x float> %6, <4 x float> %4)
  ret <4 x float> %7
}
