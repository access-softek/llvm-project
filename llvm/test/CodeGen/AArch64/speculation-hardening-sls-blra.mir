# RUN: llc -verify-machineinstrs -mtriple=aarch64-none-linux-gnu \
# RUN:     -start-before aarch64-sls-hardening -o - %s \
# RUN:     -asm-verbose=0 \
# RUN: | FileCheck %s \
# RUN:     --implicit-check-not=__llvm_slsblr_thunk_aa_x5_x6 \
# RUN:     --implicit-check-not=__llvm_slsblr_thunk_ab_x5_x6 \
# RUN:     --implicit-check-not=__llvm_slsblr_thunk_aaz_x5 \
# RUN:     --implicit-check-not=__llvm_slsblr_thunk_abz_x5

# Pointer Authentication extension introduces more branch-with-link instructions
# for the BLR SLS hardening to handle, namely BLRAA, BLRAB, BLRAAZ and BLRABZ.
# Unlike the non-authenticating BLR instruction, BLRAA and BLRAB accept two
# register operands (almost 900 combinations for each instruction).
# For that reason, it is not practical to create all possible thunks.

# Check that the BLR SLS hardening transforms BLRA* instructions into
# unconditional BL calls to the correct thunk functions.
# Check that only relevant thunk functions are generated.
--- |
  define void @fn1(i64 %x0, i64 %x1, i64 %x2, i64 %x3) #0 {
  entry:
    ret void
  }

  attributes #0 = { "target-features"="+pauth,+harden-sls-blr" }
...
---
name:            fn1
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $lr, $x0, $x1, $x2, $x3

    BLRAA $x0, $x1, implicit-def $lr, implicit $sp, implicit-def $sp, implicit-def $w0
    BLRAB $x1, $x2, implicit-def $lr, implicit $sp, implicit-def $sp, implicit-def $w0
    BLRAAZ $x2, implicit-def $lr, implicit $sp, implicit-def $sp, implicit-def $w0
    BLRABZ $x3, implicit-def $lr, implicit $sp, implicit-def $sp, implicit-def $w0
    RET undef $lr
...

# CHECK-LABEL: fn1:
# CHECK-NEXT:    .cfi_startproc
# CHECK-NEXT:    bl      __llvm_slsblr_thunk_aa_x0_x1
# CHECK-NEXT:    bl      __llvm_slsblr_thunk_ab_x1_x2
# CHECK-NEXT:    bl      __llvm_slsblr_thunk_aaz_x2
# CHECK-NEXT:    bl      __llvm_slsblr_thunk_abz_x3
# CHECK-NEXT:    ret

# CHECK-LABEL: __llvm_slsblr_thunk_aa_x0_x1:
# CHECK-NEXT:    mov     x16, x0
# CHECK-NEXT:    braa    x16, x1
# CHECK-NEXT:    dsb     sy
# CHECK-NEXT:    isb

# CHECK-LABEL: __llvm_slsblr_thunk_ab_x1_x2:
# CHECK-NEXT:    mov     x16, x1
# CHECK-NEXT:    brab    x16, x2
# CHECK-NEXT:    dsb     sy
# CHECK-NEXT:    isb

# CHECK-LABEL: __llvm_slsblr_thunk_aaz_x2:
# CHECK-NEXT:    mov     x16, x2
# CHECK-NEXT:    braaz   x16
# CHECK-NEXT:    dsb     sy
# CHECK-NEXT:    isb

# CHECK-LABEL: __llvm_slsblr_thunk_abz_x3:
# CHECK-NEXT:    mov     x16, x3
# CHECK-NEXT:    brabz   x16
# CHECK-NEXT:    dsb     sy
# CHECK-NEXT:    isb
