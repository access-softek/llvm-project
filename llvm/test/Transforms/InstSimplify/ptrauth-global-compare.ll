; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instsimplify -S | FileCheck %s

; Basic global variable

@g = external global i32
@g.ptrauth = private constant { ptr, i32, i64, i64 } { ptr @g, i32 2, i64 0, i64 0 }, section "llvm.ptrauth"

define i1 @test_external_global() {
; CHECK-LABEL: @test_external_global(
; CHECK-NEXT:    ret i1 false
;
  %tmp0 = icmp eq ptr @g.ptrauth, null
  ret i1 %tmp0
}

; Address discrimination

@g.ptrauth.addr = private constant { ptr, i32, i64, i64 } { ptr getelementptr (i64, ptr @g, i64 16), i32 2, i64 ptrtoint (ptr @g_addr_ref to i64), i64 42 }, section "llvm.ptrauth"

@g_addr_ref = constant ptr @g.ptrauth.addr

define i1 @test_external_global_addrdisc() {
; CHECK-LABEL: @test_external_global_addrdisc(
; CHECK-NEXT:    ret i1 false
;
  %tmp0 = icmp eq ptr @g.ptrauth.addr, null
  ret i1 %tmp0
}

; extern_weak global variable

@g_weak = extern_weak global i32
@g_weak.ptrauth = private constant { ptr, i32, i64, i64 } { ptr @g_weak, i32 2, i64 0, i64 0 }, section "llvm.ptrauth"

define i1 @test_extern_weak_global() {
; CHECK-LABEL: @test_extern_weak_global(
; CHECK-NEXT:    ret i1 icmp eq (ptr @g_weak.ptrauth, ptr null)
;
  %tmp0 = icmp eq ptr @g_weak.ptrauth, null
  ret i1 %tmp0
}

; Integer constant

@two.ptrauth = private constant { ptr, i32, i64, i64 } { ptr inttoptr (i64 0 to ptr), i32 0, i64 0, i64 42 }, section "llvm.ptrauth"

define i1 @test_constantint() {
; CHECK-LABEL: @test_constantint(
; CHECK-NEXT:    ret i1 icmp eq (ptr @two.ptrauth, ptr null)
;
  %tmp0 = icmp eq ptr @two.ptrauth, null
  ret i1 %tmp0
}

; FIXME: Restore?
; Unusual constant expression
